This folder (Generalized) is a generalized version of the XAF code.

1, The expansion code can now expand a unit cell chimat to any supercell.
2, Can handle nspin=2 system (spin polarized case)
---------------------------------------
Generalized expand code (g2dx.f90)

Consider the polarizability chi(r,r') in reciprocal space:

chi(r,r') = Sum_{qGG'} e^{i(q+G)r} chi(q,G,G') e^{-i(q+G')r'}
          = Sum_{qsGG'} [e^{i(qs+G)r} chi(qs,G,G') e^{-i(qs+G')r'} + Sum_{G_I} e^{i(qs+G_I+G)r} chi(qs+G_I,G,G') e^{-i(qs+G_I+G')r'}]
          = Sum_{qsGsGs'} e^{i(qs+Gs)r} chi(qs,Gs,Gs') e^{-i(qs+Gs')r'}
where q G G' stand for unit cell and qs Gs Gs' stand for super cell
if Gs-G = Gs'- G' = G_I  chi(qs,Gs,Gs') = chi(qs+G_I,G,G')
else                     chi(qs,Gs,Gs') = 0

Thus we have general mapping between the chi matrix element of unit cell and super cell.
Each q point supercell chi matrix corresponds to several q point unitcell chi matrix (qs+G_I, where G_I makes qs+G_I landed inside unit cell BZ).
(An example can be found in our JPCL paper DOI:10.1021/acs.jpclett.0c02944)

This program (g2dx.f90) reads in polarizability of a 1x1 layer system from chimat1x1
and expand it to general super cell with a regular general q mesh

 Unit cell lattice: a1 a2;  and reciprocal lattice: b1 b2
 Super cell lattice: A1 = n1 * a1 + n2 * a2   
                     A2 = m1 * a1 + m2 * a2 
 Note that in the code g2dx.f90, the determinant of the supercell matrix, n1*m2-n2*m1, needs to be a positive number. 
 So be careful to choose a positive determinant supercell matrix, otherwise g2dx.f90 will report error.
 
 and reciprocal lattice: B1 = ( m2 * b1 - m1 * b2 )/(n1m2-n2m1)
                         B2 = (-n2 * b1 + n1 * b2 )/(n1m2-n2m1)
 b1 = n1 * B1 + m1 * B2
 b2 = n2 * B1 + m2 * B2
 Any q point: q = X1 * B1 + X2 * B2 = x1 * b1 + x2 * b2
 X1 = n1 * x1 + n2 * x2;  x1 = ( m2 * X1 - n2 * X2 )/(n1m2-n2m1)
 X2 = m1 * x1 + m2 * x2;  x2 = (-m1 * X1 + n1 * X2 )/(n1m2-n2m1)
 
This means that a regular q-mesh in supercell might not be a regular mesh in unit cell BZ anymore.
Our target is to find the supercell chi matrix chi(qs,Gs,Gs') at the supercell regular q-mesh grid using the unit cell chi matrix at qs+G_I. 
So we need the above relation to find the coordinate of those supercell q points in unitcell (qs+G_I).

Use DP_generalfindqmesh.f90 to find the q mesh in unit cell.
Use g2dx.f90 to expand chi matrix.
Use addchi4g2dx.f90 to add two layer chi matrix.

---------------------------------------
Usage:

DP_generalfindqmesh.f90:
 Input: p, q, n1,n2,m1,m2,scqx,scqy
 !n1 n2 m1 m2 expansion coefficient; supercel q-mesh = p x q
 !scqx, scqy super cell q0
 
 Output: qlist, qlistshift
 qlist contains the unitcell q-mesh coordinate, remember to replace the gamma point with the q0 point for epsilon.inp.
 Calculate WFN for epsilon calculation on this qlist.
 Calculate WFNq for epsilon calculation on this qlistshift.

 Run like:
 ./DP_generalfindqmesh.x < in_findq > out_findq
 
g2dxf.f90
 Input:
 6 6 2 -1 1 3
 .true.
 .true. 
 2 
 !p q n1 n2 m1 m2;
 !supercell is metal
 !unitcell is metal
 !nspin
 Other inputs:
 chi0mat1x1 !(unit cell chi0mat)
 chimat1x1 !(unit cell chimat)
 chi0mat_exactmxm !(super cell chi0mat, this is to read the header only, so keep minimum))
 chimat_exactmxm !(super cell chimat, this is to read the header only, so keeping minimum convergence parameter is enough)
 
 Output: polarizability of the expanded system is written into file chi0mat_expandmxm
 and compared with chi0mat_exactmxm
 
 Run like:
 ./g2dx.x < in_g2dx > out_expandchi 

addchi4g2dx.f90
 Input:
 4   !number total q point (includes q0)
 2   !nspin
 Other inputs:
 chi0mat_bn !(layer1)   
 chi0mat_bnG !(total chi matrix, only to read in the header, so keep minimum parameter)   
 chi0mat_G !(layer2) 
 chimat_bn
 chimat_bnG
 chimat_G --> chimat_expandmxm
 
 Output:
 chimat_add, chi0mat_add (can be readily used in epsilon.cplx.x to get the epsmat for the full system)
 
 Run like:
 ./addchi04g2dx.x < in_addchi > out_addchi04g2dx 
 ./addchi4g2dx.x < in_addchi > out_addchi4g2dx
 
